configfile: "ControlMali_postMap.yaml"

sample=config["samples"]

# create folder for cluster use
onstart:
    print("##### Creating profile pipeline #####\n")
    print("\t Creating jobs output folder...\n")
    shell("mkdir -p jobs/")
    shell("mkdir -p logs/")
    shell("mkdir -p /scratch/punim0586/fachrulm/Mali_micro/75BP")
    shell("mkdir -p /scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KneadData")
    shell("mkdir -p /scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KMA")
    shell("mkdir -p /scratch/punim0586/fachrulm/Mali_micro/75BP/PE/CCMetagen")

rule all:
	input:
		expand("/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/CCMetagen/{sample}.ccm.csv", sample=config["samples"]),
		expand("/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/CCMetagen/{sample}.html", sample=config["samples"]),
		expand("/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/CCMetagen/{sample}.tsv", sample=config["samples"]),
		resultFile = expand("/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KMA/{sample}.res", sample=config["samples"]),
		mapstatFile = expand("/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KMA/{sample}.mapstat", sample=config["samples"]),
		knead1 = expand("/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KneadData/{sample}_1_kneaddata.repeats.removed.1.fastq", sample=config["samples"]),
		knead2 = expand("/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KneadData/{sample}_1_kneaddata.repeats.removed.2.fastq", sample=config["samples"])

rule cleanData:
	input:
		p1="/scratch/punim0586/fachrulm/Mali_micro/75BP/2mapped/{sample}_1.fastq",
		p2="/scratch/punim0586/fachrulm/Mali_micro/75BP/2mapped/{sample}_2.fastq",
		bmtaggerdir="/data/projects/punim0586/fachrulm/kneaddata/"
	output:
		knead1="/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KneadData/{sample}_1_kneaddata.repeats.removed.1.fastq",
		knead2="/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KneadData/{sample}_1_kneaddata.repeats.removed.2.fastq"
	log:
		"logs/cleanData_{sample}.log"
	
	resources:
                mem_mb=25000

	shell:
		"kneaddata -i {input.p1} -i {input.p2} "
		"-o /scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KneadData --bypass-trim --run-trf -db {input.bmtaggerdir}/GRCh38_dna_primary_assembly --run-bmtagger &> {log}"

rule KMA:
	input:
		f1 = rules.cleanData.output.knead1,
		f2 = rules.cleanData.output.knead2
	output:
		resultFile="/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KMA/{sample}.res",
		mapstatFile="/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KMA/{sample}.mapstat"
	log:
		"logs/KMA_{sample}.log"
	resources:
		mem_mb=250000
	shell:
		"kma -ipe {input.f1} {input.f2} " # -ipe Inputfile(s), paired-end
		"-o /scratch/punim0586/fachrulm/Mali_micro/75BP/PE/KMA/{wildcards.sample} " # -o output
		"-ef " # -ef used to calculate abundance in reads per million (RPM)
		"-t_db /data/scratch/projects/punim0586/kat/ncbi_nt_no_env_11jun2019 " # -t_db database;
		"-t 12 -1t1 " # -t threads; -1t1 One read to one template, no splicing performed
		"-mem_mode " # -mem_mode *.index and *.seq are not loaded into memory, which enables one to map against larger databases
		"-apm p " # -apm Paired end method, “f” force paired reads to pair, "p" reward if pairing reads, "u" unite best template matches in each read if possible.
		"-and &> {log}" # -and Both mrs and p_value thresholds has to reached to in order to report a template hit

rule CCMetagen:
	input:
		resultFile = rules.KMA.output.resultFile,
		mapstatFile = rules.KMA.output.mapstatFile
	output:
		"/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/CCMetagen/{sample}.ccm.csv",
		"/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/CCMetagen/{sample}.html",
		"/scratch/punim0586/fachrulm/Mali_micro/75BP/PE/CCMetagen/{sample}.tsv"
	log:
		"logs/CCMetagen_{sample}.log"
	params:
		python = config["python"],
		CCMetagen = config["CCMetagen"]
	shell:
		"{params.python} {params.CCMetagen} -i {input.resultFile} "
		"-o /scratch/punim0586/fachrulm/Mali_micro/75BP/PE/CCMetagen/{wildcards.sample} " # get only accession number and taconomic ranks
		"-du fr " # Get PE counts
		"--mapstat {input.mapstatFile} " # if results are reported in reads per million, the mapstat file generated by KMA needs to be supplied
		"--depth 1 &> {log}" # filter out matches with less than one read per million
